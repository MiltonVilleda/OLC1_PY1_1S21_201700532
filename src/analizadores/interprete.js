/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,19],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,27],$Vf=[1,28],$Vg=[2,5,16,17,20,21,22,24,28,30,31,34,35,44,45,46,47,48],$Vh=[1,37],$Vi=[1,36],$Vj=[1,50],$Vk=[1,56],$Vl=[1,57],$Vm=[1,47],$Vn=[1,43],$Vo=[1,42],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,48],$Vt=[1,49],$Vu=[1,52],$Vv=[1,53],$Vw=[1,54],$Vx=[1,55],$Vy=[1,58],$Vz=[1,59],$VA=[17,41],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[1,88],$VO=[1,89],$VP=[1,90],$VQ=[15,26,28,38,42,50,51,52,53,54,55,56,57,59,60,61,62,63,64,70,71],$VR=[15,38],$VS=[1,116],$VT=[26,28,38],$VU=[15,26,28,38,42,56,57,70,71],$VV=[15,26,28,38,42,50,51,52,53,54,56,57,59,60,61,62,63,64,70,71],$VW=[15,26,28,38,42,50,51,56,57,59,60,61,62,63,64,70,71],$VX=[15,26,28,38,42,50,51,52,53,56,57,59,60,61,62,63,64,70,71],$VY=[15,26,28,38,42,56,57,59,60,61,62,63,64,70,71],$VZ=[1,164],$V_=[26,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"print":9,"sent_if":10,"sent_while":11,"sent_for":12,"funciones":13,"llamada":14,"PYC":15,"EXEC":16,"ID":17,"INCRE":18,"DECRE":19,"BREAK":20,"CONTINUE":21,"RETURN":22,"e":23,"IF":24,"PARA":25,"PARC":26,"LLAVEA":27,"LLAVEC":28,"ELSE":29,"WHILE":30,"FOR":31,"actualizacion":32,"IGUAL":33,"PRINT":34,"VOID":35,"lista_parametros":36,"tipo":37,"COMA":38,"lista_exp":39,"lista_simbolos":40,"CORA":41,"CORC":42,"NEW":43,"INT":44,"DOUBLE":45,"STRING":46,"CHAR":47,"BOOLEAN":48,"vector":49,"MAS":50,"MENOS":51,"MULTI":52,"DIV":53,"POTENCIA":54,"MODULO":55,"OR":56,"AND":57,"NOT":58,"MENORQUE":59,"MAYORQUE":60,"MENORIGUAL":61,"MAYORIGUAL":62,"IGUALIGUAL":63,"DIFERENTE":64,"DECIMAL":65,"ENTERO":66,"CADENA":67,"TRUE":68,"FALSE":69,"INTERROGAC":70,"DOSPTN":71,"TOLOWER":72,"TOUPPER":73,"TRUNCATE":74,"ROUND":75,"TYPEOF":76,"TOSTRING":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"PYC",16:"EXEC",17:"ID",18:"INCRE",19:"DECRE",20:"BREAK",21:"CONTINUE",22:"RETURN",24:"IF",25:"PARA",26:"PARC",27:"LLAVEA",28:"LLAVEC",29:"ELSE",30:"WHILE",31:"FOR",33:"IGUAL",34:"PRINT",35:"VOID",38:"COMA",41:"CORA",42:"CORC",43:"NEW",44:"INT",45:"DOUBLE",46:"STRING",47:"CHAR",48:"BOOLEAN",50:"MAS",51:"MENOS",52:"MULTI",53:"DIV",54:"POTENCIA",55:"MODULO",56:"OR",57:"AND",58:"NOT",59:"MENORQUE",60:"MAYORQUE",61:"MENORIGUAL",62:"MAYORIGUAL",63:"IGUALIGUAL",64:"DIFERENTE",65:"DECIMAL",66:"ENTERO",67:"CADENA",68:"TRUE",69:"FALSE",70:"INTERROGAC",71:"DOSPTN",72:"TOLOWER",73:"TOUPPER",74:"TRUNCATE",75:"ROUND",76:"TYPEOF",77:"TOSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,3],[6,3],[6,3],[6,2],[6,2],[6,2],[6,3],[6,1],[10,7],[10,11],[10,9],[11,7],[12,10],[32,2],[32,2],[32,3],[9,5],[13,7],[13,8],[13,7],[13,8],[36,4],[36,2],[14,3],[14,4],[39,3],[39,1],[7,3],[7,11],[7,7],[8,4],[37,1],[37,1],[37,1],[37,1],[37,1],[40,3],[40,5],[40,1],[40,3],[49,7],[49,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,5],[23,2],[23,2],[23,1],[23,4],[23,4],[23,4],[23,4],[23,3],[23,3],[23,4],[23,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$ = new ast.default($$[$0-1]);  return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
 this.$= new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10:
 this.$ = $$[$0]; 
break;
case 11: case 85:
 this.$ = $$[$0-1]; 
break;
case 12:
 this.$ = new exec.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].last_column) 
break;
case 13:
 this.$ = new asignacion.default($$[$0-2],new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'+',new primitivo.default(1,_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 14:
 this.$ = new asignacion.default($$[$0-2],new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column),'-',new primitivo.default(1,_$[$0-2].first_line,_$[$0-2].last_column),_$[$0-2].first_line,_$[$0-2].last_column,false),_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 15:
 this.$ = new break_.default(); 
break;
case 16:
 this.$ = new continue_.default() 
break;
case 17:
 this.$ = new return_.default(null) 
break;
case 18:
 this.$ = new return_.default($$[$0-1]) 
break;
case 19:
 console.log("Error con: " + yytext)
                                new errores.default("Error sintactico",`${yytext} genera conflicto`,this._$.first_line,this._$.first_column)
                                
break;
case 20:
 this.$ = new if_.default($$[$0-4],$$[$0-1],[],_$[$0-6].first_line,_$[$0-6].last_column) 
break;
case 21:
 this.$ = new if_.default($$[$0-8],$$[$0-5],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column) 
break;
case 22:
 this.$ = new if_.default($$[$0-6],$$[$0-3],[$$[$0]],_$[$0-8].first_line,_$[$0-8].last_column) 
break;
case 23:
 this.$ = new while_.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column) 
break;
case 24:
 this.$ = new for_.default($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].last_column) 
break;
case 25:
 this.$ = new asignacion.default($$[$0-1],new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 26:
 this.$ = new asignacion.default($$[$0-1],new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false),_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 27:
 this.$ = new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 28:
 this.$ = new print.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].last_column) 
break;
case 29:
 this.$ = new funcion.default(3,new tipo.default('VOID'),$$[$0-5],[],true,$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 30:
 this.$ = new funcion.default(3,new tipo.default('VOID'),$$[$0-6],$$[$0-4],true,$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column); 
break;
case 31:
 this.$ = new funcion.default(3,$$[$0-6],$$[$0-5],[],false,$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 32:
 this.$ = new funcion.default(2,$$[$0-7],$$[$0-6],$$[$0-4],false,$$[$0-1],_$[$0-7].first_line,_$[$0-7].last_column); 
break;
case 33:
 this.$ = $$[$0-3]; this.$.push(new simbolos.default(6,$$[$0-1],$$[$0],new identificador.default($$[$0],_$[$0].first_line,_$[$0].last_column),_$[$0].first_line,_$[$0].last_column)) 
break;
case 34:
 this.$ = new Array(); this.$.push(new simbolos.default(6,$$[$0-1],$$[$0],new identificador.default($$[$0],_$[$0].first_line,_$[$0].last_column),_$[$0].first_line,_$[$0].last_column)); 
break;
case 35:
 this.$ = new llamada.default($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 36:
 this.$ = new llamada.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column); 
break;
case 37:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 38:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 39:
this.$ = new declaracion.default($$[$0-2],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 40:
 this.$ = new declaracion.default($$[$0-10],
            new Array(
                new simbolos.default(4,$$[$0-4],$$[$0-7],
                    //new primitivo.default(1,0,0)
                    new vector_.default($$[$0-4],$$[$0-2],[],_$[$0-5].first_line,_$[$0-5].last_column)
                )
            )
            ,_$[$0-10].first_line,_$[$0-10].last_column) 
break;
case 41:
 this.$ = new declaracion.default($$[$0-6],
            new Array(
                new simbolos.default(4,$$[$0-6],$$[$0-3],
                    //new primitivo.default(1,0,0)
                    new vector_.default($$[$0-6],null,$$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column)
                )
            )
            ,_$[$0-6].first_line,_$[$0-6].last_column) 
break;
case 42:
 this.$ = new asignacion.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 43:
 this.$ = new tipo.default('ENTERO'); 
break;
case 44:
 this.$ = new tipo.default('DOUBLE'); 
break;
case 45:
 this.$ = new tipo.default('STRING'); 
break;
case 46:
 this.$ = new tipo.default('CHAR'); 
break;
case 47:
 this.$ = new tipo.default('BOOLEAN'); 
break;
case 48:
 this.$ = $$[$0-2]; this.$.push(new simbolos.default(1,null,$$[$0],null)); 
break;
case 49:
 this.$ = $$[$0-4]; this.$.push(new simbolos.default(1,null,$$[$0-2],$$[$0])); 
break;
case 50:
 this.$ = new Array(); this.$.push(new simbolos.default(1,null,$$[$0],null)); 
break;
case 51:
 this.$ = new Array(); this.$.push(new simbolos.default(1,null,$$[$0-2],$$[$0])); 
break;
case 52:
 this.$ = new Array(); this.$.push(
                                            new simbolos.default(4,$$[$0-3],$$[$0-6],new vector_.default($$[$0-3],$$[$0-1],[]))
                                        ) 
break;
case 53:
 this.$ = new Array(); this.$.push(
                                            new simbolos.default(4,null,$$[$0-2],new vector_.default(null,0,$$[$0]))
                                        ) 
break;
case 54:
 this.$ = new aritmetica.default($$[$0-2],'+', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 55:
 this.$ = new aritmetica.default($$[$0-2],'-', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 56:
 this.$ = new aritmetica.default($$[$0-2],'*', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 57:
 this.$ = new aritmetica.default($$[$0-2],'/', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 58:
 this.$ = new aritmetica.default($$[$0-2],'^', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 59:
 this.$ = new aritmetica.default($$[$0-2],'%', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 60:
 this.$ = new logica.default($$[$0-2],'||', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 61:
 this.$ = new logica.default($$[$0-2],'&&', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 62:
 this.$ = new logica.default($$[$0],'!', $$[$0], _$[$0].first_line, _$[$0].last_column,false); 
break;
case 63:
 this.$ = new relacional.default($$[$0-2],'<', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 64:
 this.$ = new relacional.default($$[$0-2],'>', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 65:
 this.$ = new relacional.default($$[$0-2],'<=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 66:
 this.$ = new relacional.default($$[$0-2],'>=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 67:
 this.$ = new relacional.default($$[$0-2],'==', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 68:
 this.$ = new relacional.default($$[$0-2],'!=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 69:
 this.$ = new aritmetica.default($$[$0],'UNARIO', $$[$0], _$[$0].first_line, _$[$0].last_column,false); 
break;
case 70: case 71:
 this.$ = new primitivo.default(Number(yytext), _$[$0].first_line, $$[$0].last_column); 
break;
case 72: case 73:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], _$[$0].first_line, $$[$0].last_column); 
break;
case 74:
 this.$ = new primitivo.default(true, _$[$0].first_line, $$[$0].last_column); 
break;
case 75:
 this.$ = new primitivo.default(false, _$[$0].first_line, $$[$0].last_column); 
break;
case 76:
 this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].last_column) 
break;
case 77:
 this.$ = new ternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column) 
break;
case 78:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+',new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false) 
break;
case 79:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-',new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column),_$[$0-1].first_line,_$[$0-1].last_column,false) 
break;
case 80:
 this.$ = $$[$0] 
break;
case 81:
 this.$ = new toLowerUpper.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column,true) 
break;
case 82:
 this.$ = new toLowerUpper.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column,false) 
break;
case 83:
 this.$ = new truncate_.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column) 
break;
case 84:
 this.$ = new round_.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column) 
break;
case 86:
 this.$ = $$[$0-1] 
break;
case 87:
 this.$ = new typeof_.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column) 
break;
case 88:
 this.$ = new tostring_.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].last_column) 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{1:[3]},{2:$V0,5:[1,29],6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),{15:[1,31]},{14:32,17:[1,33]},{18:[1,34],19:[1,35],25:$Vh,33:$Vi},{15:[1,38]},{15:[1,39]},{14:51,15:[1,40],17:$Vj,23:41,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($Vg,[2,19]),{17:[1,62],40:60,41:[1,61]},{25:[1,63]},{25:[1,64]},{25:[1,65]},{25:[1,66]},{17:[1,67]},o($VA,[2,43]),o($VA,[2,44]),o($VA,[2,45]),o($VA,[2,46]),o($VA,[2,47]),{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,11]),{15:[1,68]},{25:$Vh},{15:[1,69]},{15:[1,70]},{14:51,17:$Vj,23:71,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:74,25:$Vk,26:[1,72],27:$Vl,39:73,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),{15:[1,75],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{14:51,17:$Vj,23:91,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:92,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($VQ,[2,70]),o($VQ,[2,71]),o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,74]),o($VQ,[2,75]),o($VQ,[2,76],{18:[1,93],19:[1,94],25:$Vh}),o($VQ,[2,80]),{25:[1,95]},{25:[1,96]},{25:[1,97]},{25:[1,98]},{14:51,17:$Vj,23:99,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:74,25:$Vk,27:$Vl,39:100,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{25:[1,101]},{25:[1,102]},{15:[1,103],38:[1,104]},{42:[1,105]},o($VR,[2,50],{25:[1,106],33:[1,107]}),{14:51,17:$Vj,23:108,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:109,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:110,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{8:111,17:[1,112]},{25:[1,113]},o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),{15:[1,114],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},o($VQ,[2,35]),{26:[1,115],38:$VS},o($VT,[2,38],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP}),o($Vg,[2,18]),{14:51,17:$Vj,23:117,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:118,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:119,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:120,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:121,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:122,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:123,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:124,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:125,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:126,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:127,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:128,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:129,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:130,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:131,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($VU,[2,62],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO}),o($VV,[2,69],{55:$VG}),o($VQ,[2,78]),o($VQ,[2,79]),{14:51,17:$Vj,23:132,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:133,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:134,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:135,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{26:[1,136],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{28:[1,137],38:$VS},{14:51,17:$Vj,23:138,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:139,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($Vg,[2,39]),{17:[1,140]},{17:[1,141]},{26:[1,142],36:143,37:144,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{14:51,17:$Vj,23:145,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{26:[1,146],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{26:[1,147],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{26:[1,148],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{14:51,17:$Vj,23:149,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{33:$Vi},{26:[1,150],36:151,37:144,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},o([2,5,16,17,20,21,22,24,25,27,28,30,31,34,35,44,45,46,47,48,51,58,65,66,67,68,69,72,73,74,75,76,77],[2,42]),o($VQ,[2,36]),{14:51,17:$Vj,23:152,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($VW,[2,54],{52:$VD,53:$VE,54:$VF,55:$VG}),o($VW,[2,55],{52:$VD,53:$VE,54:$VF,55:$VG}),o($VX,[2,56],{54:$VF,55:$VG}),o($VX,[2,57],{54:$VF,55:$VG}),o($VV,[2,58],{55:$VG}),o($VQ,[2,59]),o([15,26,28,38,42,56,70,71],[2,60],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO}),o($VU,[2,61],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO}),o($VY,[2,63],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG}),o($VY,[2,64],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG}),o($VY,[2,65],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG}),o($VY,[2,66],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG}),o($VY,[2,67],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG}),o($VY,[2,68],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG}),{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP,71:[1,153]},{26:[1,154],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{26:[1,155],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{26:[1,156],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{26:[1,157],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},o($VQ,[2,85]),o($VQ,[2,86]),{26:[1,158],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{26:[1,159],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},o($VR,[2,48],{33:[1,160]}),{33:[1,161]},{27:[1,162]},{26:[1,163],38:$VZ},{17:[1,165]},o($VR,[2,51],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP}),{15:[1,166]},{27:[1,167]},{27:[1,168]},{15:[1,169],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{27:[1,170]},{26:[1,171],38:$VZ},o($VT,[2,37],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP}),{14:51,17:$Vj,23:172,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($VQ,[2,81]),o($VQ,[2,82]),o($VQ,[2,83]),o($VQ,[2,84]),o($VQ,[2,87]),o($VQ,[2,88]),{14:51,17:$Vj,23:173,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{14:51,17:$Vj,23:175,25:$Vk,27:$Vl,43:[1,174],47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},{2:$V0,4:176,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{27:[1,177]},{37:178,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},o($V_,[2,34]),o($Vg,[2,28]),{2:$V0,4:179,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{2:$V0,4:180,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{17:[1,182],32:181},{2:$V0,4:183,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{27:[1,184]},o([15,26,28,38,42,71],[2,77],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP}),o($VR,[2,49],{50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP}),{37:185,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{15:[1,186],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{2:$V0,6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,28:[1,187],30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{2:$V0,4:188,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{17:[1,189]},{2:$V0,6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,28:[1,190],30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{2:$V0,6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,28:[1,191],30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{26:[1,192]},{18:[1,193],19:[1,194],33:[1,195]},{2:$V0,6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,28:[1,196],30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{2:$V0,4:197,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{41:[1,198]},o($Vg,[2,41]),o($Vg,[2,31]),{2:$V0,6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,28:[1,199],30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},o($V_,[2,33]),o($Vg,[2,20],{29:[1,200]}),o($Vg,[2,23]),{27:[1,201]},{26:[2,25]},{26:[2,26]},{14:51,17:$Vj,23:202,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($Vg,[2,29]),{2:$V0,6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,28:[1,203],30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{14:51,17:$Vj,23:204,25:$Vk,27:$Vl,47:$Vm,51:$Vn,58:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,69:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz},o($Vg,[2,32]),{10:206,24:$V6,27:[1,205]},{2:$V0,4:207,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{26:[2,27],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},o($Vg,[2,30]),{42:[1,208],50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,59:$VJ,60:$VK,61:$VL,62:$VM,63:$VN,64:$VO,70:$VP},{2:$V0,4:209,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},o($Vg,[2,22]),{2:$V0,6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,28:[1,210],30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},{15:[1,211]},{2:$V0,6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:$V1,17:$V2,20:$V3,21:$V4,22:$V5,24:$V6,28:[1,212],30:$V7,31:$V8,34:$V9,35:$Va,37:18,44:$Vb,45:$Vc,46:$Vd,47:$Ve,48:$Vf},o($Vg,[2,24]),o($Vg,[2,40]),o($Vg,[2,21])],
defaultActions: {29:[2,1],193:[2,25],194:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const evaluar = require('../clases/evaluar');
    const aritmetica = require('../clases/expresiones/operaciones/aritmetica');
    const relacional = require('../clases/expresiones/operaciones/relacional');
    const logica = require('../clases/expresiones/operaciones/logica');
    const primitivo = require('../clases/expresiones/primitivo')
    
    const ast = require('../clases/ast/ast');
    const declaracion = require('../clases/instrucciones/declaracion');
    const asignacion = require('../clases/instrucciones/asignacion');
    const simbolos = require('../clases/tablaSimbolos/simbolos');
    const tipo = require('../clases/tablaSimbolos/Tipo');

    const identificador = require('../clases/expresiones/identificador')
    const ternario = require('../clases/expresiones/ternario')
    const print = require('../clases/instrucciones/print')
    const if_ = require('../clases/instrucciones/sentenciasControl/if_')
    const while_ = require('../clases/instrucciones/sentenciasCiclica/while_')

    const funcion = require('../clases/instrucciones/funcion')
    const llamada = require('../clases/instrucciones/llamada')
    const exec = require('../clases/instrucciones/exec')

    const break_ = require('../clases/instrucciones/sentenciasTransferencia/break_')
    const errores = require('../clases/ast/errores')

    const return_ = require('../clases/instrucciones/sentenciasTransferencia/return_')
    const continue_ = require('../clases/instrucciones/sentenciasTransferencia/continue_')

    const toLowerUpper = require('../clases/expresiones/toLowerUpper')
    const truncate_ = require('../clases/expresiones/truncate_')
    const round_ = require('../clases/expresiones/round_')
    const tostring_ = require('../clases/expresiones/tostring_')
    const typeof_ = require('../clases/expresiones/typeof_')
    const for_ = require('../clases/instrucciones/sentenciasCiclica/for_')
    const casteo = require('../clases/expresiones/casteo')
    const vector_ = require('../clases/expresiones/vector_')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoro los comentarios simples */
break;
case 1: console.log("Reconocio : "+ yy_.yytext); return 18
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 19
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 25
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 41
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 42
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 27
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 28
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 15
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 70
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 71
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 61
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 63
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 33
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 'EVALUAR'
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 68
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 69
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 24
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 29
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 30
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 35
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 16
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 20
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 22
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 72
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 73
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 74
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 75
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 76
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 77
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 31
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 65
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 66
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 17
break;
case 57: console.log("Reconocio: "+ yy_.yytext); return 67
break;
case 58: console.log("Reconocio: "+ yy_.yytext); return 47
break;
case 59:/* skip whitespace */
break;
case 60:return 5
break;
case 61: console.log("Error con: " + yy_.yytext)
                        new errores.default("Error lexico",`El caracter ${yy_.yytext} no pertence al lenguaje`,yy_.yylineno+1,yy_.yylloc.last_column+1)
                        
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:new\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:for\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\{escaperChar})|([^\"\\]+))*")))/i,/^(?:(('((\\{escaperChar})|([^\'\\]+))*')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}